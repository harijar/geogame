// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repo/repo.go -destination=internal/mocks/mock_countries.go -package=mocks . Countries
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	countries "github.com/harijar/geogame/internal/repo/postgres/countries"
	gomock "go.uber.org/mock/gomock"
)

// MockCountries is a mock of Countries interface.
type MockCountries struct {
	ctrl     *gomock.Controller
	recorder *MockCountriesMockRecorder
}

// MockCountriesMockRecorder is the mock recorder for MockCountries.
type MockCountriesMockRecorder struct {
	mock *MockCountries
}

// NewMockCountries creates a new mock instance.
func NewMockCountries(ctrl *gomock.Controller) *MockCountries {
	mock := &MockCountries{ctrl: ctrl}
	mock.recorder = &MockCountriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountries) EXPECT() *MockCountriesMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCountries) Get(id int) *countries.Country {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*countries.Country)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCountriesMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCountries)(nil).Get), id)
}

// GetAnotherRandom mocks base method.
func (m *MockCountries) GetAnotherRandom(country *countries.Country) *countries.Country {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnotherRandom", country)
	ret0, _ := ret[0].(*countries.Country)
	return ret0
}

// GetAnotherRandom indicates an expected call of GetAnotherRandom.
func (mr *MockCountriesMockRecorder) GetAnotherRandom(country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnotherRandom", reflect.TypeOf((*MockCountries)(nil).GetAnotherRandom), country)
}

// GetPlaceArea mocks base method.
func (m *MockCountries) GetPlaceArea(country *countries.Country) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceArea", country)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPlaceArea indicates an expected call of GetPlaceArea.
func (mr *MockCountriesMockRecorder) GetPlaceArea(country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceArea", reflect.TypeOf((*MockCountries)(nil).GetPlaceArea), country)
}

// GetPlaceGDP mocks base method.
func (m *MockCountries) GetPlaceGDP(country *countries.Country) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceGDP", country)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPlaceGDP indicates an expected call of GetPlaceGDP.
func (mr *MockCountriesMockRecorder) GetPlaceGDP(country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceGDP", reflect.TypeOf((*MockCountries)(nil).GetPlaceGDP), country)
}

// GetPlaceGDPPerCapita mocks base method.
func (m *MockCountries) GetPlaceGDPPerCapita(country *countries.Country) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceGDPPerCapita", country)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPlaceGDPPerCapita indicates an expected call of GetPlaceGDPPerCapita.
func (mr *MockCountriesMockRecorder) GetPlaceGDPPerCapita(country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceGDPPerCapita", reflect.TypeOf((*MockCountries)(nil).GetPlaceGDPPerCapita), country)
}

// GetPlaceHDI mocks base method.
func (m *MockCountries) GetPlaceHDI(country *countries.Country) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceHDI", country)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPlaceHDI indicates an expected call of GetPlaceHDI.
func (mr *MockCountriesMockRecorder) GetPlaceHDI(country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceHDI", reflect.TypeOf((*MockCountries)(nil).GetPlaceHDI), country)
}

// GetPlacePopulation mocks base method.
func (m *MockCountries) GetPlacePopulation(country *countries.Country) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlacePopulation", country)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPlacePopulation indicates an expected call of GetPlacePopulation.
func (mr *MockCountriesMockRecorder) GetPlacePopulation(country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlacePopulation", reflect.TypeOf((*MockCountries)(nil).GetPlacePopulation), country)
}

// GetRandom mocks base method.
func (m *MockCountries) GetRandom() *countries.Country {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom")
	ret0, _ := ret[0].(*countries.Country)
	return ret0
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockCountriesMockRecorder) GetRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockCountries)(nil).GetRandom))
}
